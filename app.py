import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import numpy as np
import plotly.graph_objects as go

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets (CSV URL)
def load_sales_data():
    sheet_id = "15_JmzjUIt2LXrUlVug3yGYlZ2XslwVnlt6ge7DIT-rE"
    gid = "949201953"
    csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}"

    # ‡πÇ‡∏´‡∏•‡∏î
    df = pd.read_csv(csv_url)

    # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    df = df.rename(columns={
        'Timestamp': 'timestamp',
        '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': 'branch',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ': 'trans_type',
        '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö': 'income_cat',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó): ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö': 'income_thb',
        '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢': 'expense_cat',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó): ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢': 'expense_thb',
        '‡∏ä‡∏∑‡πà‡∏≠ Supplier / ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤': 'cust_name'
    })

    # ‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    df = df.dropna(subset=['timestamp', 'trans_type'])

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå description ‡πÅ‡∏•‡∏∞ amount_thb
    df['description'] = df.apply(
        lambda row: row['expense_cat'] if row['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'
                    else row['income_cat'] if row['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'
                    else None,
        axis=1
    )

    df['amount_thb'] = df.apply(
        lambda row: row['expense_thb'] if row['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'
                    else row['income_thb'] if row['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'
                    else None,
        axis=1
    )

    # ‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    for col in ['income_thb', 'expense_thb', 'amount_thb']:
        df[col] = (
            df[col]
            .replace('[‡∏ø,]', '', regex=True)
            .replace('', '0')
            .pipe(pd.to_numeric, errors='coerce')
            .fillna(0.0)
        )

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp
    df['timestamp'] = pd.to_datetime(df['timestamp'], dayfirst=True, errors='coerce')
    df['cust_name'] = df['cust_name'].replace('-', np.nan)
    df = df[['timestamp', 'branch', 'trans_type', 'cust_name', 'description', 'amount_thb']].dropna(how='all')
    df['year_month'] = df['timestamp'].dt.to_period('M').astype(str)

    # ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
    df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'] = np.where(df['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', df['amount_thb'], 0)
    df['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô'] = np.where(df['trans_type'] == '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', df['amount_thb'], 0)

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£
    sale_df = df.groupby(['year_month', 'branch'])[['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô']].sum()
    sale_df['‡∏Å‡∏≥‡πÑ‡∏£'] = sale_df['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'] - sale_df['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô']
    return sale_df.reset_index()

# ‚úÖ App setup
app = dash.Dash(__name__)

branches = [
    '‡∏î‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤)',
    'A&D ‡∏à‡∏¥‡∏ß‡πÄ‡∏ß‡∏•‡∏£‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á',
    'ASASA',
    'LaGemme',
    'velan.co'
]

app.layout = html.Div(
    style={'backgroundColor': '#111', 'padding': '20px'},
    children=[
        html.H1(
            "üìà Dashboard",
            style={'color': 'white', 'fontFamily': 'Noto Sans Thai, Arial, sans-serif'}
        ),

        html.Label(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤:",
            style={'color': 'white', 'fontFamily': 'Noto Sans Thai, Arial, sans-serif'}
        ),

        dcc.Dropdown(
            id='branch-filter',
            options=[{'label': b, 'value': b} for b in branches],
            value='‡∏î‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤)'
        ),

        html.Div(
            id='summary-container',
            style={
                'display': 'flex',
                'justifyContent': 'space-around',
                'margin': '20px 0',
                'fontSize': '18px',
                'fontWeight': 'bold',
                'fontFamily': 'Noto Sans Thai, Arial, sans-serif',
                'color': 'white'
            }
        ),

        dcc.Graph(id='sales-cost-profit-graph')
    ]
)


# ‚úÖ Callback
@app.callback(
    [Output('sales-cost-profit-graph', 'figure'),
     Output('summary-container', 'children')],
    [Input('branch-filter', 'value')]
)
def update_graph(selected_branch):
    # Load fresh data each time (for always up-to-date)
    df = load_sales_data()

    # Filter by branch
    if selected_branch == '‡∏î‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤)':
        filtered_df = df.copy()
    else:
        filtered_df = df[df['branch'] == selected_branch]

    # Monthly summary
    monthly = filtered_df.groupby(['year_month'])[['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô', '‡∏Å‡∏≥‡πÑ‡∏£']].sum().reset_index()

    # Average profit per month
    if selected_branch == '‡∏î‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤)':
        total_profit_all = df['‡∏Å‡∏≥‡πÑ‡∏£'].sum()
        total_months = df['year_month'].nunique()
        avg_sales_per_month = total_profit_all / total_months if total_months != 0 else 0
    else:
        branch_data = df[df['branch'] == selected_branch]
        total_profit_branch = branch_data['‡∏Å‡∏≥‡πÑ‡∏£'].sum()
        months_branch = branch_data['year_month'].nunique()
        avg_sales_per_month = total_profit_branch / months_branch if months_branch != 0 else 0

    # Summary numbers
    def fmt(x):
        return f"{x:,.0f}"

    total_sales = monthly['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'].sum()
    total_cost = monthly['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô'].sum()
    total_profit = monthly['‡∏Å‡∏≥‡πÑ‡∏£'].sum()
    profit_percent = (total_profit / total_sales * 100) if total_sales != 0 else 0

    summary_children = [
        html.Div([html.Div("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"), html.Div(f"{fmt(total_sales)} ‡∏ö‡∏≤‡∏ó", style={'color': 'white'})]),
        html.Div([html.Div("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"), html.Div(f"{fmt(total_cost)} ‡∏ö‡∏≤‡∏ó", style={'color': 'red'})]),
        html.Div([html.Div("‡∏Å‡∏≥‡πÑ‡∏£"), html.Div(f"{fmt(total_profit)} ‡∏ö‡∏≤‡∏ó", style={'color': 'green'})]),
        html.Div([html.Div("‡∏Å‡∏≥‡πÑ‡∏£ (%)"), html.Div(f"{profit_percent:.2f} %", style={'color': 'green'})]),
    ]

    # Graph
    fig = go.Figure()

    fig.add_bar(
        x=monthly['year_month'],
        y=monthly['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô'],
        name='‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô',
        marker_color='red',
        text=monthly['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô'],
        textposition='inside',
        texttemplate='%{text:,.0f}'
    )

    fig.add_bar(
        x=monthly['year_month'],
        y=monthly['‡∏Å‡∏≥‡πÑ‡∏£'],
        name='‡∏Å‡∏≥‡πÑ‡∏£',
        marker_color='green',
        text=monthly['‡∏Å‡∏≥‡πÑ‡∏£'],
        textposition='inside',
        texttemplate='%{text:,.0f}'
    )

    fig.add_trace(
        go.Scatter(
            x=monthly['year_month'],
            y=monthly['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'],
            mode='lines+markers+text',
            name='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
            line=dict(color='white', width=3),
            text=monthly['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'],
            textposition='top center',
            texttemplate='%{text:,.0f}'
        )
    )

    # Average line
    fig.add_hline(
        y=avg_sales_per_month,
        line_dash="dash",
        line_color="yellow",
        annotation_text=f"‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {fmt(avg_sales_per_month)} ‡∏ö‡∏≤‡∏ó",
        annotation_position="top right",
        annotation_font_color="yellow",
    )

    fig.update_layout(
        barmode='relative',
        title=f'‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à - {selected_branch}',
        xaxis_title='‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        yaxis_title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
        template='plotly_dark',
        font=dict(family="Noto Sans Thai, Arial, sans-serif", size=14, color="white"),
        legend=dict(title='‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', orientation='h', yanchor='bottom', y=1, xanchor='right', x=1),
        margin=dict(t=40, b=80, l=80, r=80),
    )

    return fig, summary_children


# ‚úÖ Run
if __name__ == '__main__':
    app.run()
